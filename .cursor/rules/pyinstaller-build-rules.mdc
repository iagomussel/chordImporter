---
description: "PyInstaller build configuration rules"
alwaysApply: false
---
# PyInstaller Build Rules

## Aggressive Dependency Inclusion

When working with PyInstaller builds, follow these rules:

### 1. Spec File Configuration

Always use **ULTRA AGGRESSIVE** hiddenimports in [ChordImporter.spec](mdc:ChordImporter.spec):

```python
hiddenimports=[
    # COMPLETE sounddevice inclusion
    'sounddevice',
    'sounddevice._sounddevice',
    'sounddevice._internal', 
    'sounddevice._sounddevice_data',
    '_sounddevice',
    
    # COMPLETE numpy inclusion
    'numpy.core._multiarray_umath',
    'numpy.linalg._umath_linalg',
    'numpy.fft.pocketfft_internal',
    # ... ALL numpy submodules
    
    # COMPLETE cffi inclusion (required by sounddevice)
    'cffi.backend_ctypes',
    '_cffi_backend',
    'pycparser',
    # ... ALL cffi components
]
```

### 2. Custom Hooks

Create comprehensive hooks in `hooks/` directory:

- [hooks/hook-sounddevice.py](mdc:hooks/hook-sounddevice.py) - MUST use `collect_all()`
- [hooks/hook-numpy.py](mdc:hooks/hook-numpy.py) - MUST include ALL submodules
- [hooks/hook-librosa.py](mdc:hooks/hook-librosa.py) - MUST include numba, sklearn dependencies

### 3. Build Scripts

Build scripts like [build_complete.py](mdc:build_complete.py) MUST:

- Install ALL dependencies before building
- Verify ALL audio libraries are present
- Use `--collect-all` flags for critical packages
- NEVER proceed if any dependency is missing

### 4. Testing

Always verify the build includes ALL dependencies:

- Check `_internal` directory contains audio libraries
- Verify `.pyd` and `.dll` files are present
- Test executable doesn't ask for installations

### 5. Error Handling

If build fails to include dependencies:
1. **Expand hiddenimports** in spec file
2. **Enhance custom hooks** with more aggressive collection
3. **Add explicit binaries/datas** if needed
4. **NEVER create fallback code**