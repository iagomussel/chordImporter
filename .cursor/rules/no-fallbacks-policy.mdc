---
alwaysApply: true
description: "Critical policy: NEVER use fallbacks in this project, FOLLOW ALL RULES"
---
- NO FALLBACKS POLICY - CRITICAL
- ABSOLUTE RULE: NEVER USE FALLBACKS
- NEVER CREATE UI SIMULATIONS OR MOCKS - CREATE A FULL FUNCTIONAL THING OR KEEP IT INCOMPLETED 
This project has a **ZERO TOLERANCE** policy for fallbacks. All dependencies MUST be included in the build.
- do not repeate yourself - USE REUSABLE COMPONENTS ALWAYS AS POSSIBLE
- IF ALREADY EXIST A FILE, USE IT INSTEAD CREATE A NEW ONE, ex if you plan to edit 'tunner.py', do not create: 'simple_tunner.py', 'advanced_tunner.py', main_tunner.py', test_tunner.py, approach_x_tunner.... only edit the self file
### What This Means:

1. **NO try/except import patterns** like:
   ```python
   # ❌ FORBIDDEN
   try:
       import sounddevice
   except ImportError:
       import fallback_module
   ```

2. **NO conditional imports** based on availability:
   ```python
   # ❌ FORBIDDEN
   if sounddevice_available:
       from tuner_new import TunerWindow
   else:
       from tuner_fallback import TunerWindow
   ```

3. **NO "smart" selection systems** that choose between implementations
4. **NO runtime dependency checking** with fallback behavior
5. **NO SIMULATE THE OUTPURT WITH HARD CODED THINGS**
