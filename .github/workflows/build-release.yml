name: Build and Release

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          # Tkinter and audio libs needed by numpy/scipy/pyaudio/librosa/soundfile
          sudo apt-get install -y \
            python3-tk \
            libasound2-dev \
            portaudio19-dev \
            libsndfile1 \
            ffmpeg

      - name: Upgrade pip and install deps
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt

      - name: Build with PyInstaller
        run: |
          pyinstaller --clean -y ChordImporter.spec

      - name: Package artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $appName = 'MusicalToolsSuite'
          $distPath = Join-Path 'dist' $appName
          if (!(Test-Path $distPath)) { throw "Dist path not found: $distPath" }
          $sha = "${{ github.sha }}".Substring(0,7)
          $zipName = "${appName}-windows-x64-${sha}.zip"
          if (Test-Path $zipName) { Remove-Item $zipName -Force }
          Compress-Archive -Path (Join-Path $distPath '*') -DestinationPath $zipName
          Write-Host "Created artifact: $zipName"

      - name: Package artifact (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          appName=MusicalToolsSuite
          distPath="dist/${appName}"
          [ -d "$distPath" ]
          sha="${GITHUB_SHA::7}"
          tarName="${appName}-linux-x64-${sha}.tar.gz"
          tar -czf "$tarName" -C "$distPath" .
          echo "Created artifact: $tarName"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ runner.os }}
          path: |
            MusicalToolsSuite-*.zip
            MusicalToolsSuite-*.tar.gz
          if-no-files-found: error

  release:
    name: Update Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded files
        run: |
          ls -R artifacts

      - name: Create or update 'latest' release
        uses: ncipollo/release-action@v1
        with:
          tag: latest
          name: Latest Continuous Build
          body: |
            Automated build from commit ${{ github.sha }} on branch ${{ github.ref_name }}.
            This release is updated on every push to master.
          allowUpdates: true
          replacesArtifacts: true
          makeLatest: true
          prerelease: true
          artifacts: |
            artifacts/build-ubuntu-latest/MusicalToolsSuite-*.tar.gz,
            artifacts/build-windows-latest/MusicalToolsSuite-*.zip

